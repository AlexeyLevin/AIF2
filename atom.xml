<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AIF2]]></title>
  <link href="http://b0noI.github.io/AIF2/atom.xml" rel="self"/>
  <link href="http://b0noI.github.io/AIF2/"/>
  <updated>2014-12-27T20:47:55+00:00</updated>
  <id>http://b0noI.github.io/AIF2/</id>
  <author>
    <name><![CDATA[AIF2 Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[splitter_characters_grouper_search_step parameter tuning]]></title>
    <link href="http://b0noI.github.io/AIF2/blog/2014/12/27/splitter-characters-grouper-search-step-parameter-tuning/"/>
    <updated>2014-12-27T16:08:46+00:00</updated>
    <id>http://b0noI.github.io/AIF2/blog/2014/12/27/splitter-characters-grouper-search-step-parameter-tuning</id>
    <content type="html"><![CDATA[<p>In last <a href="http://aif.io/blog/2014/12/27/first-ipython-usage-for-quality-analyze/">article</a> we discussed our plan about searching optimal values for splitter_characters_grouper_search_step. This time we will show how we were able to find optimal value and prove that this value is optimal.</p>

<h2>Some theory about splitter_characters_grouper_search_step value</h2>

<p>This value is used by Sentence splitting module. At some point our algorithm doing gradient search of the sentence splitters (we are not going to dive to the algorithm right now). Point is that this value is compromise between accuracy and speed. We can have as accurate result as small value we can set, on the other side of coin, this value have dramatic impact on the algorithm speed. As low we set this value as much slow we will make our algorithm.</p>

<p>When choosing value for this parameter, you always need to ask:</p>

<ul>
<li>is there are highest level of accuracy that you can get with this algorithm? - if this limit exists you can&rsquo;t get more accurate result even by making value splitter_characters_grouper_search_step lower;</li>
<li>if accuracy limit exists, what maximum value of splitter_characters_grouper_search_step we can set to achieve this level of accuracy? Knowing this information will give us compromise between best accuracy and algorithm speed;</li>
</ul>


<p>In <a href="http://aif.io/blog/2014/12/27/first-ipython-usage-for-quality-analyze/">prev</a> article we already collected enough experiments results for visualizing and building function:</p>

<p><img src="https://s3.amazonaws.com/aif2/screenshots/Screen+Shot+2014-12-27+at+12.42.51.png" alt="img" /></p>

<p>now we can proceed with function building</p>

<h2>Building function for splitter_characters_grouper_search_step vs quality</h2>

<p>We decided to use least squares method for building polynomial. By quick first look on plot you may think that we should use polynomial with max power 2 (3 elements polynomial) like this one:</p>

<p><img src="https://s3.amazonaws.com/aif2/screenshots/Screen+Shot+2014-12-27+at+17.54.28.png" alt="img" /></p>

<p>Here is the plot of the final function:</p>

<p><img src="https://s3.amazonaws.com/aif2/screenshots/Screen+Shot+2014-12-27+at+16.01.47.png" alt="img" /></p>

<p>As you can see from this plot count of errors start decreasing after some point. This could not be correct. But this chart could be pretty close to the target one. Also here is target limit for this function:</p>

<p><img src="https://s3.amazonaws.com/aif2/screenshots/Screen+Shot+2014-12-27+at+18.00.21.png" alt="img" /></p>

<p>so the top quality that we can get is 54 errors. That is not true, because we have our experiment that shows 53 errors. Let&rsquo;s increase size of the polynomial to 5 (size 4 is similar to 3).</p>

<p>Resulted chart:</p>

<p><img src="https://s3.amazonaws.com/aif2/screenshots/Screen+Shot+2014-12-27+at+16.02.08.png" alt="img" /></p>

<p>and new limit:</p>

<p><img src="https://s3.amazonaws.com/aif2/screenshots/Screen+Shot+2014-12-27+at+18.04.46.png" alt="img" /></p>

<p>this result is much more accurate and consistent with real life.</p>

<h2>Conclusion</h2>

<p>As you can see, 53 errors is the best value of quality that can be achieved by setting different values to the variable. This means that we need to find biggest value of this variable that still gives us 53 error. And the value is:</p>

<p>{&ldquo;value&rdquo;: 0.0031, &ldquo;errors&rdquo;: 53},</p>

<p>this is 6x times bigger than previous value (0.0005), so we improve algorithm speed in 6x time without losing accuracy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First IPython Usage for analyzing quality ]]></title>
    <link href="http://b0noI.github.io/AIF2/blog/2014/12/27/first-ipython-usage-for-quality-analyze/"/>
    <updated>2014-12-27T13:14:33+00:00</updated>
    <id>http://b0noI.github.io/AIF2/blog/2014/12/27/first-ipython-usage-for-quality-analyze</id>
    <content type="html"><![CDATA[<p>Today is the first day of work with Alpha4. One of the main improvements that we’ve done is the way how we tune AIF settings. AIF has a lot of different variables in settings and we need to prove which value is best for quality.</p>

<p><em>note</em>: in this post we left measuring quality process out of our scope. Quality measurement is the question of other article.</p>

<p>Here is config example of current revision:</p>

<figure class='code'><figcaption><span>properties</span><a href='https://github.com/b0noI/AIF2/blob/master/src/main/resources/io/aif/common/settings/main.properties'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='basic'><span class='line'><span class="vg">version</span><span class="o">=</span><span class="mf">1.1.0</span><span class="o">-</span><span class="vg">alpha3</span>
</span><span class='line'><span class="err"> </span><span class="vg">minimum_tokens_input_count</span><span class="o">=</span><span class="il">600</span>
</span><span class='line'><span class="err"> </span><span class="vg">use_is_alphabetic_method</span><span class="o">=</span><span class="vg">true</span>
</span><span class='line'><span class="err"> </span><span class="vg">threshold_p_for_second_filter_separator_character</span><span class="o">=</span><span class="mf">.65</span>
</span><span class='line'><span class="err"> </span><span class="vg">minimal_valuable_token_size_during_sentence_splitting</span><span class="o">=</span><span class="il">3</span>
</span><span class='line'><span class="err"> </span><span class="vg">minimum_character_obervations_count_for_make_charatcer_valuable_during_sentence_splitting</span><span class="o">=</span><span class="il">10</span>
</span><span class='line'><span class="err"> </span><span class="vg">threshold_p_for_first_filter_separator_character</span><span class="o">=</span><span class="mf">0.05</span>
</span><span class='line'><span class="err"> </span><span class="vg">splitter_characters_grouper_search_step</span><span class="o">=</span><span class="mf">0.0005</span>
</span><span class='line'><span class="err"> </span><span class="vg">splitter_characters_grouper_init_search_P_value</span><span class="o">=</span><span class="mf">0.65</span>
</span><span class='line'><span class="err"> </span><span class="vg">word_set_dict_comparator_treshold</span><span class="o">=</span><span class="mf">0.75</span>
</span></code></pre></td></tr></table></div></figure>


<p>each of these variables can impact quality. So we need to have a way of building function that correlates each of these variables with output quality. In the perfect world with pony we should have the one big function that correlates all variables from settings with the quality. Unfortunately building the one global function is hard task. So we decided to build function for each variable independly to see how this particular variable impacts the quality.</p>

<p>Today we will show the small step that was done with the &ldquo;splitter_characters_grouper_search_step&rdquo; variable.</p>

<p>Our experiment is very simple:</p>

<ul>
<li>execute a lot of quality tests with different &ldquo;splitter_characters_grouper_search_step&rdquo; values;</li>
<li>plot the results;</li>
<li>build the function that based on the data from first step;</li>
<li>find global extremum of the function and set configuration to that extremum.</li>
</ul>


<p>So, basically, we need to find value of &ldquo;splitter_characters_grouper_search_step&rdquo; that gives the best quality.</p>

<h2>Executing a lot of quality tests</h2>

<p>Done with the simple implementation (may be refactored in future):</p>

<figure class='code'><figcaption><span>experimentWith_splitter_characters_grouper_search_step</span><a href='https://github.com/b0noI/AIF2/blob/c093104ecbc069016d1d187e6779efd3593d6a57/src/test/integration/java/io/aif/language/common/settings/PropertyBasedSettingsTest.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">experimentWith_splitter_characters_grouper_search_step</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getRootLogger</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">setLevel</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">OFF</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">PropertyBasedSettings</span> <span class="n">propertyBasedSettings</span> <span class="o">=</span> <span class="o">(</span><span class="n">PropertyBasedSettings</span><span class="o">)</span> <span class="n">ISettings</span><span class="o">.</span><span class="na">SETTINGS</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;splitter_characters_grouper_search_step: [&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Double</span> <span class="n">splitter_characters_grouper_search_step</span> <span class="o">=</span> <span class="mf">0.00005</span><span class="o">;</span> <span class="n">splitter_characters_grouper_search_step</span> <span class="o">&lt;</span> <span class="mf">0.3</span><span class="o">;</span> <span class="n">splitter_characters_grouper_search_step</span> <span class="o">+=</span> <span class="mf">0.0005</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">propertyBasedSettings</span><span class="o">.</span><span class="na">properties</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;splitter_characters_grouper_search_step&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">splitter_characters_grouper_search_step</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">testResult</span> <span class="o">=</span> <span class="n">SimpleSentenceSplitterCharactersExtractorQualityTest</span><span class="o">.</span><span class="na">executeTest</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;{value: %f, errors: %d},&quot;</span><span class="o">,</span> <span class="n">splitter_characters_grouper_search_step</span><span class="o">,</span> <span class="n">testResult</span><span class="o">.</span><span class="na">keySet</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">key</span> <span class="o">-&gt;</span> <span class="n">testResult</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">size</span><span class="o">()).</span><span class="na">sum</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will generate Python array with data. Using this we can use Python for visualizing data to see the shape of the function.</p>

<p><em>note</em>: this variable was chosen as the first to be analyzed because we expecting it to has simple function without local extremums at all with 1 global extremum that we are searching for.</p>

<h2>Visualizing data with Python</h2>

<p>After we have all the data we can plot it to see how quality chart is looks like. Here is Python code that is doing exactly this:</p>

<figure class='code'><figcaption><span>splitter_characters_grouper_search_step.py</span><a href='https://github.com/b0noI/AIF2/blob/c093104ecbc069016d1d187e6779efd3593d6a57/src/test/integration/python/splitter_characters_grouper_search_step.py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># data collected by PropertyBasedSettingsTest.experimentWith_splitter_characters_grouper_search_step</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;value&quot;</span><span class="p">:</span> <span class="mf">0.000050</span><span class="p">,</span> <span class="s">&quot;errors&quot;</span><span class="p">:</span> <span class="mi">53</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;value&quot;</span><span class="p">:</span> <span class="mf">0.000550</span><span class="p">,</span> <span class="s">&quot;errors&quot;</span><span class="p">:</span> <span class="mi">53</span><span class="p">},</span>
</span><span class='line'><span class="c"># ... lines removed</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;value&quot;</span><span class="p">:</span> <span class="mf">0.144550</span><span class="p">,</span> <span class="s">&quot;errors&quot;</span><span class="p">:</span> <span class="mi">65</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;value&quot;</span><span class="p">:</span> <span class="mf">0.145050</span><span class="p">,</span> <span class="s">&quot;errors&quot;</span><span class="p">:</span> <span class="mi">65</span><span class="p">},</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="s">&quot;value&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">y</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="s">&quot;errors&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;x&quot;</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="s">&quot;y&quot;</span><span class="p">:</span> <span class="n">y</span><span class="p">}</span>
</span><span class='line'><span class="n">df</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pandas.tools.rplot</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="s">&#39;ro&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;splitter_characters_grouper_search_step&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&#39;splitter_characters_grouper_search_step vs errors count&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>result of execution  is:</p>

<p><img src="https://s3.amazonaws.com/aif2/screenshots/Screen+Shot+2014-12-27+at+12.42.51.png" alt="img" /></p>

<h2>Next steps</h2>

<p>Now we can try to build function that represents the plot. It will give us the answers, can we improve quality by reducing value even more or we already reach the limit of this function. For this we will have to find lim(f(x)) of our function.</p>

<p>We will create a new blog entry when we have new data to show!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AIF Alpha3 is out]]></title>
    <link href="http://b0noI.github.io/AIF2/blog/2014/12/26/aif-alpha3-is-out/"/>
    <updated>2014-12-26T13:48:56+00:00</updated>
    <id>http://b0noI.github.io/AIF2/blog/2014/12/26/aif-alpha3-is-out</id>
    <content type="html"><![CDATA[<p>Today our community is happy to announce next version of AIF: Alpha3</p>

<p>Main focus in Alpha3 was on the next 2 points:</p>

<ul>
<li>quality improvements;</li>
<li>text dictionary building;</li>
</ul>


<p>And we are proudly announcing that both of the goals are achieved!</p>

<p><a href="http://aif.io/docs/aif2-lib/alpha3/">Alpha3 documentation page</a></p>

<p><a href="http://aif.io/docs/aif2-lib/alpha3/api/words.html">Dictionary building documentation</a></p>

<p>big thanks to all of you who participate in this long, but important release. Our team that make this release possible:</p>

<ul>
<li>Kovalevskyi Viacheslav – algorithm developer, architecture design, team lead (<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#x76;&#x69;&#97;&#99;&#104;&#101;&#x73;&#x6c;&#97;&#x76;&#64;&#x62;&#x30;&#x6e;&#x6f;&#x69;&#46;&#99;&#111;&#109;">&#x76;&#x69;&#x61;&#x63;&#104;&#x65;&#x73;&#x6c;&#x61;&#x76;&#64;&#98;&#48;&#110;&#x6f;&#105;&#46;&#99;&#111;&#x6d;</a> / b0noi)</li>
<li>Ifthikhan Nazeem – algorithm designer, architecture design, developer</li>
<li>Sviatoslav Glushchenko — REST design and implementation, developer</li>
<li>Oleg Kozlovskyi QA (integration and qaulity testing), developer.</li>
<li>Balenko Aleksey (<a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#x70;&#x6f;&#100;&#111;&#x72;&#x6f;&#x7a;&#104;&#x6e;&#105;&#x63;&#107;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#112;&#111;&#100;&#111;&#x72;&#x6f;&#x7a;&#104;&#x6e;&#105;&#99;&#x6b;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#109;</a>) – added stammer support to CLI, junior developer</li>
<li>Evgeniy Dolgikh — QA assistance, junior developer</li>
</ul>


<p>Our next release (Alpha4) will be dedicated to the core component of semantic analyze. So it would be fun, stay tinned!</p>

<p>Please note that Alpha2 is deprecated from very this moment and will not be supported.</p>

<p>Also Alpha3 is the first release that taking place on the brand new AIF.IO site!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aif.io is alive]]></title>
    <link href="http://b0noI.github.io/AIF2/blog/2014/12/20/aif-dot-io-is-alive/"/>
    <updated>2014-12-20T22:11:13+00:00</updated>
    <id>http://b0noI.github.io/AIF2/blog/2014/12/20/aif-dot-io-is-alive</id>
    <content type="html"><![CDATA[<h2>Long live aif.io!</h2>

<p>Today, AIF community os proud to announce AIF web site: <a href="aif.io">aif.io</a></p>

<p>With this site, old <a href="https://github.com/b0noI/AIF2/wiki">wiki</a> is deprecated and will not be maintained from very this moment. Each old wiki page has been updated with the link to new web site.</p>

<p>Big thanks to Evgeniy Dolgikh (Marcon) who was in charge of creating this site and porting all documentation from old wiki! This web-site will be impossible without his work!</p>

<p>In nearest plans to have:</p>

<ul>
<li>IRC channel</li>
<li>forum</li>
</ul>


<p>And of course we are about to release Alpha3, so stay touched</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[initial]]></title>
    <link href="http://b0noI.github.io/AIF2/blog/2014/10/20/test/"/>
    <updated>2014-10-20T17:53:13+01:00</updated>
    <id>http://b0noI.github.io/AIF2/blog/2014/10/20/test</id>
    <content type="html"><![CDATA[<p>AIF finally moved to it&rsquo;s own web-site! For documentation check our <a href="http://aif.io/docs/">documentation page</a></p>
]]></content>
  </entry>
  
</feed>
