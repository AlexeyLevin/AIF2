#### 1. Strings ####
version=2.0.0-Beta2


#### 2. General settings ####
minimum_tokens_input_count=600
use_is_alphabetic_method=true
predefined_separators=\r\n \t\u000B\u000C\u0085\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u2028\u2029\
  \u202F\u205F\u3000\u180E\u200B\u200C\u200D\u2060\uFEFF

#### 3. Sentences splitting settings ####
# optimal value for was calculated by: threshold_p_for_second_filter_separator_character
threshold_p_for_second_filter_separator_character=.565

minimal_valuable_token_size_during_sentence_splitting=3

# This value is incorrect by it's nature, we should be able to set count level
# based on procente from total characters count,
# absolute value is incorrect due to nature of absolute values
minimum_character_observations_count_for_make_character_valuable_during_sentence_splitting=10

# optimum calculated by script: threshold_p_for_first_filter_separator_character.py
threshold_p_for_first_filter_separator_character=0.05

# to read how the value for this variable was calculated see http://aif.io/blog/2014/12/27/splitter-characters-grouper-search-step-parameter-tuning/
splitter_characters_grouper_search_step=0.0031

# this variable don't have ANY impact on quality!
splitter_characters_grouper_init_search_P_value=0.65


#### 4. DICT BUILDER SECTION ####
## 4.1 Token comparators ##
# logic of optimum value search in dict.py file
recursive_substring_comparator_weight=0.995
simple_token_comparator_weight=0.805
character_density_comparator_weight=0.995

## 4.2 Group(Word) comparators ##
# logic for optimum value search in word_set_dict_comparator_threshold.py file
word_set_dict_comparator_threshold=0.8465
