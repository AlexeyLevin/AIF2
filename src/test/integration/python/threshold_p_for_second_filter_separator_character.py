# data collected by PropertyBasedSettingsTest.experimentWith_threshold_p_for_second_filter_separator_character

data = [
{"value": 0.000000, "errors": 1505},
{"value": 0.005000, "errors": 1654},
{"value": 0.010000, "errors": 1832},
{"value": 0.015000, "errors": 1805},
{"value": 0.020000, "errors": 1773},
{"value": 0.025000, "errors": 1767},
{"value": 0.030000, "errors": 1732},
{"value": 0.035000, "errors": 1678},
{"value": 0.040000, "errors": 1645},
{"value": 0.045000, "errors": 1622},
{"value": 0.050000, "errors": 1603},
{"value": 0.055000, "errors": 1572},
{"value": 0.060000, "errors": 1517},
{"value": 0.065000, "errors": 1457},
{"value": 0.070000, "errors": 1412},
{"value": 0.075000, "errors": 1348},
{"value": 0.080000, "errors": 1291},
{"value": 0.085000, "errors": 1250},
{"value": 0.090000, "errors": 1204},
{"value": 0.095000, "errors": 1143},
{"value": 0.100000, "errors": 1071},
{"value": 0.105000, "errors": 1038},
{"value": 0.110000, "errors": 994},
{"value": 0.115000, "errors": 952},
{"value": 0.120000, "errors": 910},
{"value": 0.125000, "errors": 879},
{"value": 0.130000, "errors": 856},
{"value": 0.135000, "errors": 834},
{"value": 0.140000, "errors": 819},
{"value": 0.145000, "errors": 803},
{"value": 0.150000, "errors": 788},
{"value": 0.155000, "errors": 769},
{"value": 0.160000, "errors": 745},
{"value": 0.165000, "errors": 718},
{"value": 0.170000, "errors": 696},
{"value": 0.175000, "errors": 668},
{"value": 0.180000, "errors": 649},
{"value": 0.185000, "errors": 628},
{"value": 0.190000, "errors": 609},
{"value": 0.195000, "errors": 588},
{"value": 0.200000, "errors": 567},
{"value": 0.205000, "errors": 548},
{"value": 0.210000, "errors": 525},
{"value": 0.215000, "errors": 509},
{"value": 0.220000, "errors": 490},
{"value": 0.225000, "errors": 468},
{"value": 0.230000, "errors": 447},
{"value": 0.235000, "errors": 435},
{"value": 0.240000, "errors": 405},
{"value": 0.245000, "errors": 383},
{"value": 0.250000, "errors": 370},
{"value": 0.255000, "errors": 355},
{"value": 0.260000, "errors": 341},
{"value": 0.265000, "errors": 336},
{"value": 0.270000, "errors": 325},
{"value": 0.275000, "errors": 306},
{"value": 0.280000, "errors": 284},
{"value": 0.285000, "errors": 274},
{"value": 0.290000, "errors": 270},
{"value": 0.295000, "errors": 262},
{"value": 0.300000, "errors": 252},
{"value": 0.305000, "errors": 241},
{"value": 0.310000, "errors": 234},
{"value": 0.315000, "errors": 228},
{"value": 0.320000, "errors": 218},
{"value": 0.325000, "errors": 210},
{"value": 0.330000, "errors": 202},
{"value": 0.335000, "errors": 196},
{"value": 0.340000, "errors": 192},
{"value": 0.345000, "errors": 184},
{"value": 0.350000, "errors": 180},
{"value": 0.355000, "errors": 177},
{"value": 0.360000, "errors": 175},
{"value": 0.365000, "errors": 172},
{"value": 0.370000, "errors": 169},
{"value": 0.375000, "errors": 159},
{"value": 0.380000, "errors": 156},
{"value": 0.385000, "errors": 155},
{"value": 0.390000, "errors": 149},
{"value": 0.395000, "errors": 142},
{"value": 0.400000, "errors": 140},
{"value": 0.405000, "errors": 134},
{"value": 0.410000, "errors": 127},
{"value": 0.415000, "errors": 124},
{"value": 0.420000, "errors": 119},
{"value": 0.425000, "errors": 117},
{"value": 0.430000, "errors": 116},
{"value": 0.435000, "errors": 116},
{"value": 0.440000, "errors": 112},
{"value": 0.445000, "errors": 108},
{"value": 0.450000, "errors": 106},
{"value": 0.455000, "errors": 106},
{"value": 0.460000, "errors": 105},
{"value": 0.465000, "errors": 104},
{"value": 0.470000, "errors": 101},
{"value": 0.475000, "errors": 99},
{"value": 0.480000, "errors": 99},
{"value": 0.485000, "errors": 98},
{"value": 0.490000, "errors": 93},
{"value": 0.495000, "errors": 91},
{"value": 0.500000, "errors": 85},
{"value": 0.505000, "errors": 80},
{"value": 0.510000, "errors": 71},
{"value": 0.515000, "errors": 65},
{"value": 0.520000, "errors": 59},
{"value": 0.525000, "errors": 57},
{"value": 0.530000, "errors": 52},
{"value": 0.535000, "errors": 49},
{"value": 0.540000, "errors": 45},
{"value": 0.545000, "errors": 38},
{"value": 0.550000, "errors": 39},
{"value": 0.555000, "errors": 38},
{"value": 0.560000, "errors": 39},
{"value": 0.565000, "errors": 37},
{"value": 0.570000, "errors": 39},
{"value": 0.575000, "errors": 39},
{"value": 0.580000, "errors": 39},
{"value": 0.585000, "errors": 39},
{"value": 0.590000, "errors": 39},
{"value": 0.595000, "errors": 41},
{"value": 0.600000, "errors": 41},
{"value": 0.605000, "errors": 41},
{"value": 0.610000, "errors": 43},
{"value": 0.615000, "errors": 43},
{"value": 0.620000, "errors": 43},
{"value": 0.625000, "errors": 45},
{"value": 0.630000, "errors": 46},
{"value": 0.635000, "errors": 46},
{"value": 0.640000, "errors": 49},
{"value": 0.645000, "errors": 53},
{"value": 0.650000, "errors": 53},
{"value": 0.655000, "errors": 53},
{"value": 0.660000, "errors": 53},
{"value": 0.665000, "errors": 53},
{"value": 0.670000, "errors": 53},
{"value": 0.675000, "errors": 53},
{"value": 0.680000, "errors": 60},
{"value": 0.685000, "errors": 62},
{"value": 0.690000, "errors": 62},
{"value": 0.695000, "errors": 62},
{"value": 0.700000, "errors": 61},
{"value": 0.705000, "errors": 63},
{"value": 0.710000, "errors": 69},
{"value": 0.715000, "errors": 68},
{"value": 0.720000, "errors": 73},
{"value": 0.725000, "errors": 72},
{"value": 0.730000, "errors": 78},
{"value": 0.735000, "errors": 83},
{"value": 0.740000, "errors": 87},
{"value": 0.745000, "errors": 95},
{"value": 0.750000, "errors": 103},
{"value": 0.755000, "errors": 115},
{"value": 0.760000, "errors": 121},
{"value": 0.765000, "errors": 128},
{"value": 0.770000, "errors": 131},
{"value": 0.775000, "errors": 148},
{"value": 0.780000, "errors": 150},
{"value": 0.785000, "errors": 160},
{"value": 0.790000, "errors": 170},
{"value": 0.795000, "errors": 185},
{"value": 0.800000, "errors": 196},
{"value": 0.805000, "errors": 203},
{"value": 0.810000, "errors": 209},
{"value": 0.815000, "errors": 220},
{"value": 0.820000, "errors": 227},
{"value": 0.825000, "errors": 237},
{"value": 0.830000, "errors": 261},
{"value": 0.835000, "errors": 275},
{"value": 0.840000, "errors": 286},
{"value": 0.845000, "errors": 294},
{"value": 0.850000, "errors": 309},
{"value": 0.855000, "errors": 316},
{"value": 0.860000, "errors": 322},
{"value": 0.865000, "errors": 330},
{"value": 0.870000, "errors": 342},
{"value": 0.875000, "errors": 359},
{"value": 0.880000, "errors": 367},
{"value": 0.885000, "errors": 380},
{"value": 0.890000, "errors": 390},
{"value": 0.895000, "errors": 403},
]


x = []
y = []

for value in data:
    x.append(value["value"])
    y.append(value["errors"])

from pandas import *

d = {"x": x, "y": y}
df = DataFrame(d)

import matplotlib.pyplot as plt
from pandas.tools.rplot import *

plt.plot(x, y, 'ro')
plt.ylabel('errors')
plt.xlabel('threshold_p_for_second_filter_separator_character')
plt.title('threshold_p_for_second_filter_separator_character vs errors count')

polynomial = Polynomial(x, y, 2)

new_x = []
new_y = []
current_x = 0.
while current_x < 0.9:
    new_x.append(current_x)
    new_y.append(polynomial.getval(current_x))
    current_x += 0.0005

plt.plot(new_x, new_y, 'ro')
print (polynomial.getval(0.))